# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: post-release
on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.release.outputs.id }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: |
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-y.%-m.%-d'`\",/" package.json
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-y.%-m.%-d'`\",/" src-tauri/tauri.conf.json
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate Release Notes
        run: |
          python3 .github/workflows/release-notes.py --tag ${{ env.RELEASE_VERSION }} --output notes-${{ env.RELEASE_VERSION }}.md
          cat notes-${{ env.RELEASE_VERSION }}.md
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body_path: notes-${{ env.RELEASE_VERSION }}.md
  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux, macos, macos_aarch64, win-msvc, linux-musl, linux-arm-v7, linux-aarch64 ]
        include:
          - platform: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - platform: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - platform: macos_aarch64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
          - platform: win-msvc
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - platform: linux-musl
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
          - platform: linux-arm-v7
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
          - platform: linux-aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    env:
      BINARY_EXTENSION: ${{ endsWith(matrix.target, '-msvc') && '.exe' || '' }}
      STAGING: notion-rss-cli_${{ needs.create-release.outputs.release_version }}_${{ matrix.target }}
      PATH_BINARY: target/${{ matrix.target }}/release/notion-rss-cli${{ endsWith(matrix.target, '-msvc') && '.exe' || '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn' # Set this to npm, yarn or pnpm.
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> ../target'
      - name: set version
        shell: bash
        run: |
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-y.%-m.%-d'`\",/" package.json
          sed -i -e "s/^version = .*/version = \"`date +'%-y.%-m.%-d'`\"/" Cargo.toml
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-y.%-m.%-d'`\",/" src-tauri/tauri.conf.json
      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib xz-utils liblz4-tool libc6-dev libssl-dev musl-tools pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
      - name: Install packages (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          choco install make strawberryperl nsis nasm llvm openssl --no-progress --limit-output
          echo "OPENSSL_SRC_PERL=C:\Strawberry\perl\bin\perl" >> $GITHUB_ENV
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >>$GITHUB_ENV
          echo "C:\Program Files\NASM" >> $GITHUB_PATH
          echo "OPENSSL_RUST_USE_NASM=1" >> $GITHUB_ENV
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - name: Build tauri app
        uses: tauri-apps/tauri-action@dev
        if: matrix.platform == 'win-msvc' ||  matrix.platform == 'linux' || matrix.platform == 'macos' || matrix.platform == 'macos_aarch64'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target ${{ matrix.target }}
      - name: Build cli release binary
        shell: bash
        run: |
          mv src-tauri/src/bin/notion-rss.rs src-tauri/src/bin/notion-rss-cli.rs
          cargo build --release --features cli --no-default-features --target ${{ matrix.target }} --bin=notion-rss-cli
      - name: Build archive
        shell: bash
        run: |
          mkdir -p ${{ env.STAGING }}/
          cp {README.md,LICENSE} ${{ env.STAGING }}/
          cp ${{ env.PATH_BINARY }} ${{ env.STAGING }}/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cd ${{ env.STAGING }}
            7z a "../${{ env.STAGING }}.zip" .
            echo "ASSET=${{ env.STAGING }}.zip" >> $GITHUB_ENV
          else
            tar czf "${{ env.STAGING }}.tar.gz" -C ${{ env.STAGING }} notion-rss-cli README.md LICENSE
            echo "ASSET=${{ env.STAGING }}.tar.gz" >> $GITHUB_ENV
          fi
      - name: Upload cli release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [ create-release, build-tauri ]
    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
  docker:
    runs-on: ubuntu-latest
    needs:
      - publish-release
    steps:
      - name: Git Checkout
        uses: actions/checkout@v3

      - name: Get Github tag
        id: meta
        shell: bash
        run: |
          curl --silent "https://api.github.com/repos/CodeGeass9527/notion-rss/releases/latest" > latest.json
          cat latest.json| jq -r .tag_name | xargs -I {} echo TAG={} >> $GITHUB_OUTPUT
          cat latest.json| jq -r '.assets[]|select(.name |startswith("notion-rss-cli_"))|select(.name |endswith("unknown-linux-musl.tar.gz")).browser_download_url' | xargs -I {} echo DOWNLOAD_URL={} >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          build-args: |
            DOWNLOAD_URL=${{ steps.meta.outputs.DOWNLOAD_URL }}
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/notion-rss:latest,${{ secrets.DOCKER_USERNAME }}/notion-rss:${{ steps.meta.outputs.TAG }}